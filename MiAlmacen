import java.util.*;

// Crear la clase Producto y completar los métodos

public class MiAlmacen
{
    static private ModeloAbs almacen;
    static Scanner sc;
    
    public static void main(String[] args){
        almacen=new ModeloArrayList ();
        sc = new Scanner(System.in);
        int opcion=0;
        do{
        mostrarMenu();
                opcion=leerOpcion(1,9);
                switch(opcion){
                    case 1: crear();break;
                    case 2: consultar();break;
                    case 3: borrar();break;
                    case 4: modificarPrecio();break;
                    case 5: comprar();break;
                    case 6: vender();break;
                    case 7: listar();break;
                    case 8: listarPocoStock();break;
                }
                System.out.println("\n---------------------------- ");
                System.out.print("Pulse enter para continuar");
                sc.nextLine();
        }while(opcion!=9);
        sc.close();
        
    }
    
    
    private static void mostrarMenu(){
        System.out.println("\n\n    MENU");
        System.out.println("1. Nuevo producto ");
        System.out.println("2. Consulta producto ");
        System.out.println("3. Borrar producto ");
        System.out.println("4. Modificar precio ");
        System.out.println("5. Compra de productos ");
        System.out.println("6. Venta de productos ");
        System.out.println("7. Listado completo de productos ");
        System.out.println("8. Listado de productos con stock inferior al mínimo");
        System.out.println("9. Terminar ");
        System.out.print("Elige una opción (1-9)");        
    }
    
    // Lee un entero del System.in que este comprendido entre primero y ultimo
    private static int leerOpcion(int primero, int ultimo){
        int valor = leerEntero();
        while ( valor <primero || valor > ultimo){
            valor = leerEntero();
        }
        return valor;
    }
      
    
    // Metodos Auxiliares leerFloat y LeerEntero, 
    // Lee de la System.in con el scanner sc y controlan la excepcion de NumberFormatException
    static private float leerFloat(){
        
        boolean error = false;
        float valor =0;
        String cadena;
        do {
        error = false;  
          try {
             // Intento leer directamente un entero  
             cadena = sc.nextLine();
             valor = Float.parseFloat(cadena);
             
            } catch(NumberFormatException e){
              System.out.println("Error en formato.");
              error = true;
            }
        }
       while ( error);
       return valor;
    }
    
    static private int leerEntero(){
        boolean error = false;
        Integer valor =0;
        do {
        error = false;  
          try {
             // Intento leer directamente un entero  
            valor=sc.nextInt();
            } catch(NumberFormatException e){
              System.out.println("Error en formato.");
              error = true;
            }
        }
       while ( error);
       return valor;
    }

    // Muestra los datos de un producto a partir de su codigo
    
    private static void consultar(){        
       System.out.println("<CONSULTA>");
       System.out.print("Introduzca codigo:");
       int codigo = leerEntero();
       Producto p = almacen.buscarProducto(codigo);
       if ( p == null){
           System.out.println("El producto no se encuentra en almacen");
        }
       else {
           System.out.println("PRODUCTO "+p);
        }
       
    }
    
   
    // Borrar un producto a partir de su codigo
    private static void borrar(){   
       Scanner sc=new Scanner(System.in);
     boolean eliminar=false; char agree;
     System.out.println("Introduce el id a borrar: ");
     int id=sc.nextInt();
 
     do {
     for(int i=0;i<lista.size();i++) {
         if(lista.get(i).getId()==id){
             lista.remove(id);
             System.out.println("Contiene lo siguiente: "+lista.toString());
             System.out.println("Desea eliminar esta informacion?(s/n): ");
             agree=sc.next().charAt(0);
             if(agree=='s') {
                 eliminar=true;
                }
             }
         }
     }while(eliminar == false);
    }

    // Cambia el precio de un producto a partir de su codigo
    private static void modificarPrecio (){
     float precio; int id; Producto aux=null;
     Scanner sc = new Scanner(System.in);
     System.out.println("Introduce el id a buscar: ");
     id=sc.nextInt();
     
     if(lista.contains(id)) {
         System.out.println("Introduzca nuevo precio: ");
         precio=sc.nextFloat();
         
         //conseguir los datos que buscas
         for(int i=0;i<lista.size();i++) {
             if(lista.get(i).getId()==id) {
                aux=lista.get(i);
             }
         }
         
         System.out.println("Datos: "+lista.toString()); 
         System.out.println("-----------------------------------------------------------------------------------------"); 
         
         System.out.println("Introduzca nuevo precio: ");
         precio=sc.nextFloat();
         
         if(precio<0) {
             System.out.println("El precio no puede ser negativo"); 
         }else if(precio ==0) {
             System.out.println("El precio no puede ser 0"); 
         }else {
             lista.get(id).setPrecio(precio);
             System.out.println("Datos con nuevo Precio: ");
             System.out.println("Datos: "+ lista.toString()); 
         }
        
         
     }else{
         System.out.println("No existe id, operacion irrealizable");
     }
}
    // Incrementa el stock
private static void comprar(){     
     int tipo; int cantidad;
     Scanner sc = new Scanner(System.in);
     System.out.println("Introduce el codigo del producto que deseas comprar: ");
     tipo=sc.nextInt();
     if(lista.contains(tipo)) {
         System.out.println("Introduce las unidades a comprar: ");
         cantidad=sc.nextInt();
        for(int i=0;i<lista.size();i++) {
            if(lista.get(i).getCodigo().equals(tipo)) {
                lista.get(i).setStock(lista.get(i).getStock()+cantidad);
                break;
            }
            break;
        }
     }else {
         //agregar nuevo producto
         System.out.println("Introduce las unidades a comprar: ");
         cantidad=sc.nextInt();
        for(int i=0;i<lista.size();i++) {
            lista.add(0, lista.get(i).setCodigo(tipo),lista.get(i).setStock(cantidad));
        }
         
     }
     
    }
    
    // Decrementa el stock
private static void vender(){
     int tipo; int cantidad; 
     Scanner sc = new Scanner(System.in);
     System.out.println("Introduce el producto del que deseas comprar: ");
     tipo=sc.nextInt();
     if(listProducto.contains(tipo)) {
         System.out.println("Introduce las unidades a comprar: ");
         cantidad=sc.nextInt();
            for(int i=0;i<lista.size();i++) {
                if(lista.get(i).getCodigo().equals(tipo)) {
                    lista.get(i).setStock(lista.get(i).getStock()-cantidad);
                    if(lista.get(i).getStock()<0) {
                        lista.get(i).setStock(0);
                        }
                    }
                }
            }
     }
    
    // Listado de todos los productos
private static void listar(){        
 System.out.println("Los productos disponibles en tienda son: ");
 System.out.println(lista.toArray());
    }
    
    
    // Listado de todos los productos con stock inferior a stock minimo
    private static void listarPocoStock(){
        System.out.println("<LISTAR STOCK BAJO MINIMOS>");
        System.out.println("Aún no disponible");
    }
    
    // Solicita datos al usuario para dar de alta un nuevo producto 
    // El codigo no se puede repetir
    private static void crear(){
       System.out.println("<NUEVO PRODUCTO>");
       System.out.println("AÃºn no disponible");
       // IMPLEMENTAR
    }
       
  
}
